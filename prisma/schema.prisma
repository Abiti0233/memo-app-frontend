// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String?
  access_token String?
  expires_at Int?
  token_type String?
  scope String?
  id_token String?
  session_state String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String @unique
  userId String
  expires DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token String
  expires DateTime

  @@id([identifier, token])
}

model User {
  id      String      @id @default(uuid())
  name    String?
  email   String   @unique
  emailVerified DateTime?
  password String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Memo[] は、Memo テーブルとの 1 対多の関係を表す。
  memos Memo[]
  bookmarks Bookmark[]
  userSettings UserSetting?
  categories Category[]
  accounts Account[]
  sessions Session[]
}

model Memo {
  id  String @id @default(uuid())
  userId String
  title String
  content String
  is_archived Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  categories   MemoCategory[] @relation("MemoCategories")
  bookmarks Bookmark[]
}

model Category {
  id  String @id @default(uuid())
  userId String
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  memoCategories MemoCategory[] @relation("CategoryMemos")

  user User @relation(fields: [userId], references: [id])

  // 各ユーザーが同じカテゴリ名を持てないようにする
  @@unique ([userId, name], name: "user_category_name_unique")
}

model MemoCategory {
  memoId String
  categoryId String

  memo Memo @relation("MemoCategories", fields: [memoId], references: [id])
  category Category @relation("CategoryMemos", fields: [categoryId], references: [id])

  // 複合主キーを設定し、同じメモとカテゴリの組み合わせが重複しないようにする
  @@id ([memoId, categoryId])
  
  // memo_idとcategory_idの組み合わせにインデックスを設定
  @@index ([memoId, categoryId], name: "memo_category_index")
}

model Bookmark {
  id  String @id @default(uuid())
  userId String
  memoId String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  memo Memo @relation(fields: [memoId], references: [id])

  // user_idとmemo_idの組み合わせにインデックスを設定
  @@index ([userId, memoId], name: "user_memo_index")
}

model UserSetting {
  userId String @id
  theme String @default("light")
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}